library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;

entity uart_fsm is
	port (	clk, Rx: in std_logic;
				b: out std_logic_vector(7 downto 0) 	
			);
end entity uart_fsm;

architecture behaviour of uart_fsm is
type fsm_states is (idle, start, data, stop);
signal CS, NS : fsm_states := idle;
signal data_start, n_data, s_data, reset_s, s_count, n_count, store_data : BIT;
signal scount : std_logic_vector(3 downto 0);
signal ncount : std_logic_vector(2 downto 0);
signal temp : std_logic_vector(7 downto 0);


begin
Synchronous_process: process(clk)
	begin	
		if clk'event and clk = '1' then
			CS <= NS;
		end if;
end process;

NextState_logic: process (CS, NS, Rx, data_start, n_data, s_data)
	begin case CS is
		when idle =>
			if Rx = '0' then	
				NS <= start;
			else
				NS <= idle;
			end if;
		when start =>
			if data_start = '1' then
				NS <= data;
			else 
				NS <= start;
			end if;
		when data =>
			if s_data = '0' then
				NS <= data;
			elsif n_data = '0' and s_data = '1' then
				NS <= data;
			elsif n_data = '1' and s_data = '1' then
				NS <= stop;
			end if;
		when stop =>
			if s_data = '0' then
				NS <= idle;
			else
				NS <= stop;
			end if;
	end case;
end process;

Output_logic: process(CS, Rx, data_start, s_data, n_data)
	begin case CS is
		when idle =>
			if Rx = '0' then	
				reset_s <= '1';
			else
				reset_s <= '0';
			end if;
		when start =>
			if data_start = '0' then
				reset_s <= '0';
				s_count <= '1';
			else
				reset_s <= '1';
				s_count <= '0';
			end if;
		when data =>
			if s_data = '0' then
				s_count <= '1';
				store_data <= '0';
			elsif n_data = '0' and s_data = '1' then
				reset_s <= '1';
				store_data <= '1';
				n_count <= '1';
			elsif n_data = '1' and s_data = '1' then
				reset_s <= '1';
				store_data <= '1';
				s_count <= '0';
			end if;
		when stop =>
			if s_data = '0' then	
				s_count <= '0';
			end if;
	end case;
end process;

end behaviour;